# –§–∞–π–ª: app/handlers.py

from datetime import datetime, time
import io
import dateparser
import openpyxl
from aiogram import F, Router, Bot
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (CallbackQuery, Message,
                           ReplyKeyboardRemove,
                           InlineKeyboardMarkup, InlineKeyboardButton)
from aiogram.types.input_file import BufferedInputFile
from aiogram.types import FSInputFile
from apscheduler.schedulers.asyncio import AsyncIOScheduler # –†–µ–∫–æ–º–µ–Ω–¥—É—é —É–±—Ä–∞—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ main.py
from haversine import Unit, haversine
import logging

import app.keyboards as kb
import database.requests as bd
import sites.purse as purse


class Student(StatesGroup):
    education = State()
    institute = State()
    fuclty = State()
    group = State()
    course_for_group_selection = State()
    name = State()
    schedule = State()


class AddData(StatesGroup):
    waiting_for_institute_name = State()
    waiting_for_fuclty_name = State()
    waiting_for_group_name = State()
    waiting_for_group_url = State()
    waiting_for_student_fio = State()


router = Router()
ADMIN_USER_ID = 1033042355

start_text = """
–ü—Ä–∏–≤–µ—Ç!üòÅ‚úåÔ∏è
–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:
- –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–∏—Å—É—Ç–≤—É—é—â–∏—Ö –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏
- –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é
- –≤—ã–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞ —ç—Ç–æ—Ç —É—á–µ–±–Ω—ã–π –≥–æ–¥
"""
info_text = """–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏\n
üìå<b>"–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"</b> - —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–µ–±—è –≤ –±–∞–∑–µ
üìå<b>"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"</b> - —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ—É –æ —Å–µ–±–µ
üìå<b>"–û—Ç–º–µ—Ç–∏—Ç—å—Å—è"</b> - —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ –ø–∞—Ä–µ
—É—á—Ç–∏, —á—Ç–æ –æ—Ç–º–µ—á–∞—Ç—å—Å—è –º–æ–∂–Ω–æ –∑–∞ 20 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –∑–∞–Ω—è—Ç–∏—è, –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—èüòâ 
üìå<b>"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"</b> - —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
üìå<b>"–°–ø–∏—Å–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö"</b> - —á—Ç–æ–±—ã —Å–æ–∑–¥–∞–ª—Å—è —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–∞–º–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö"""


async def clear_schedule_job_placeholder(bot_instance: Bot):  # –ó–∞–≥–ª—É—à–∫–∞, –µ—Å–ª–∏ APScheduler –≤—ã–Ω–µ—Å–µ–Ω
    logging.info("APScheduler: –ü–ª–∞–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ clear_schedule_job –≤—ã–∑–≤–∞–Ω–∞ (–∑–∞–≥–ª—É—à–∫–∞).")
    # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–æ–≥–∏–∫–∞, –Ω–µ –∑–∞–≤–∏—Å—è—â–∞—è –æ—Ç FSMContext –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    # –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î –∏–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –∫—ç—à–µ.


@router.message(CommandStart())
async def command_start(message: Message, state: FSMContext) -> None:
    # –õ–æ–≥–∏–∫—É APScheduler –ª—É—á—à–µ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ main.py –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    # scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
    # scheduler.add_job(clear_schedule_job_placeholder, "cron", minute=1, hour=0, day_of_week="mon", args=[message.bot])
    # try:
    #     if not scheduler.running: # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω
    #        scheduler.start()
    # except Exception as e_sched:
    #     logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞/—Ä–∞–±–æ—Ç—ã APScheduler: {e_sched}")
    try:
        await message.delete()
    except Exception:
        pass
    await message.answer(start_text, reply_markup=kb.first_kb)
    await message.answer(info_text, parse_mode="html")


@router.message(F.text == "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
async def start_authorization_handler(message: Message, state: FSMContext) -> None:
    try:
        await message.delete()
    except Exception:
        pass
    sent_msg = await message.answer("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...", reply_markup=ReplyKeyboardRemove())
    try:
        await sent_msg.delete()
    except Exception:
        pass
    await state.clear()
    await state.set_state(Student.education)
    await message.answer("1. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è:", reply_markup=kb.get_education_kb())


@router.callback_query(
    StateFilter(None, Student.education, Student.institute, Student.fuclty, Student.group, Student.name, AddData),
    F.data == "cancel_auth_process")
async def cancel_authorization_process(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    try:
        await callback.message.edit_text("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    except Exception:
        try:  # –ï—Å–ª–∏ edit_text –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback.message.delete()
            await callback.message.answer("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
        except Exception:
            # –ï—Å–ª–∏ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫
            pass
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.first_kb)
    await callback.answer("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")


@router.callback_query(Student.education, F.data.startswith("education_"))
async def process_education_choice(callback: CallbackQuery, state: FSMContext):
    education_choice = callback.data.split("education_")[1]
    await state.update_data(education=education_choice)
    await state.set_state(Student.institute)
    await callback.message.edit_text(
        f"–§–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è: {education_choice.replace('–±–∞–∫–∞–ª–∞–≤—Ä', '–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç').replace('–º–∞–≥–∏—Å—Ç—Ä', '–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞')}\n"
        f"2. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∏–Ω—Å—Ç–∏—Ç—É—Ç:",
        reply_markup=kb.get_institute_kb(education_choice, 1)
    )
    await callback.answer()


@router.callback_query(Student.institute, F.data == "back_to_education_selection")
async def back_to_education_from_institute(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Student.education)
    await state.update_data(institute_id=None, education=None)
    await callback.message.edit_text("1. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è:", reply_markup=kb.get_education_kb())
    await callback.answer()


@router.callback_query(Student.institute, F.data.startswith("institute_page_"))
async def paginate_institutes(callback: CallbackQuery, state: FSMContext):
    page = int(callback.data.split("_")[2])
    data = await state.get_data()
    education_state = data.get("education")
    if not education_state:
        await state.set_state(Student.education)
        await callback.message.edit_text("–û—à–∏–±–∫–∞: —Ñ–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.",
                                         reply_markup=kb.get_education_kb())
        await callback.answer("–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è", show_alert=True)
        return
    await callback.message.edit_text(
        f"–§–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è: {education_state.replace('–±–∞–∫–∞–ª–∞–≤—Ä', '–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç').replace('–º–∞–≥–∏—Å—Ç—Ä', '–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞')}\n"
        f"2. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∏–Ω—Å—Ç–∏—Ç—É—Ç (—Å—Ç—Ä. {page}):",
        reply_markup=kb.get_institute_kb(education_state, page)
    )
    await callback.answer()


@router.callback_query(Student.institute, F.data.startswith("id_institute_"))
async def process_institute_choice(callback: CallbackQuery, state: FSMContext):
    institute_id = int(callback.data.split("_")[-1])
    await state.update_data(institute_id=institute_id)
    data = await state.get_data()
    education_state = data.get("education")
    institute_name = bd.get_institute_from_id(institute_id)
    await state.set_state(Student.fuclty)
    await callback.message.edit_text(
        f"–§–æ—Ä–º–∞: {education_state.replace('–±–∞–∫–∞–ª–∞–≤—Ä', '–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç').replace('–º–∞–≥–∏—Å—Ç—Ä', '–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞')}\n"
        f"–ò–Ω—Å—Ç–∏—Ç—É—Ç: {institute_name}\n"
        f"3. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:",
        reply_markup=kb.get_fuclty_kb(institute_id, education_state, 1)
    )
    await callback.answer()


@router.callback_query(Student.fuclty, F.data.startswith("back_to_institute_selection_"))
async def back_to_institute_from_faculty(callback: CallbackQuery, state: FSMContext):
    education_state = callback.data.split("_")[-1]
    await state.set_state(Student.institute)
    # institute_id —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ Student.institute, —Ç–∞–∫ —á—Ç–æ –µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å
    # education —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ state –∏–ª–∏ –º—ã –µ–≥–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ callback_data
    await state.update_data(fuclty_id=None, education=education_state) # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ education –≤ state
    await callback.message.edit_text(
        f"–§–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è: {education_state.replace('–±–∞–∫–∞–ª–∞–≤—Ä','–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç').replace('–º–∞–≥–∏—Å—Ç—Ä','–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞')}\n"
        f"2. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∏–Ω—Å—Ç–∏—Ç—É—Ç:", # institute_name –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–µ–Ω, —Ç.–∫. –º—ã –≤—ã–±–∏—Ä–∞–µ–º –∏–Ω—Å—Ç–∏—Ç—É—Ç
        reply_markup=kb.get_institute_kb(education_state, 1)
    )
    await callback.answer()


@router.callback_query(Student.fuclty, F.data.startswith("fuclty_page_"))
async def paginate_faculties(callback: CallbackQuery, state: FSMContext):
    page = int(callback.data.split("_")[2])
    data = await state.get_data()
    institute_id_state = data.get("institute_id")
    education_state = data.get("education")
    if not institute_id_state or not education_state:
        await state.set_state(Student.education)
        await callback.message.edit_text("–û—à–∏–±–∫–∞: –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.", reply_markup=kb.get_education_kb())
        await callback.answer("–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è", show_alert=True)
        return
    institute_name = bd.get_institute_from_id(institute_id_state)
    await callback.message.edit_text(
        f"–§–æ—Ä–º–∞: {education_state.replace('–±–∞–∫–∞–ª–∞–≤—Ä', '–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç').replace('–º–∞–≥–∏—Å—Ç—Ä', '–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞')}\n"
        f"–ò–Ω—Å—Ç–∏—Ç—É—Ç: {institute_name}\n"
        f"3. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (—Å—Ç—Ä. {page}):",
        reply_markup=kb.get_fuclty_kb(institute_id_state, education_state, page)
    )
    await callback.answer()


@router.callback_query(Student.fuclty, F.data.startswith("id_fuclty_"))
async def process_faculty_choice(callback: CallbackQuery, state: FSMContext):
    faculty_id = int(callback.data.split("_")[-1])
    await state.update_data(fuclty_id=faculty_id, course_for_group_selection=1)
    data = await state.get_data()
    education_state = data.get("education")
    institute_id_state = data.get("institute_id")
    faculty_name = bd.get_fuclty_from_id(faculty_id)
    institute_name = bd.get_institute_from_id(institute_id_state)
    await state.set_state(Student.group)
    await callback.message.edit_text(
        f"–§–æ—Ä–º–∞: {education_state.replace('–±–∞–∫–∞–ª–∞–≤—Ä', '–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç').replace('–º–∞–≥–∏—Å—Ç—Ä', '–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞')}\n"
        f"–ò–Ω—Å—Ç–∏—Ç—É—Ç: {institute_name}\n"
        f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {faculty_name}\n"
        f"4. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É (1 –∫—É—Ä—Å):",
        reply_markup=kb.get_group_kb(faculty_id, 1, education_state, 1)
    )
    await callback.answer()


@router.callback_query(Student.group, F.data == "back_to_faculty_selection")
async def back_to_faculty_from_group(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    institute_id_state = data.get("institute_id")
    education_state = data.get("education")
    if not institute_id_state or not education_state:
        await state.set_state(Student.education)
        await callback.message.edit_text("–û—à–∏–±–∫–∞: –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.", reply_markup=kb.get_education_kb())
        await callback.answer("–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è", show_alert=True)
        return
    await state.set_state(Student.fuclty)
    await state.update_data(study_group_id=None, course_for_group_selection=None)
    institute_name = bd.get_institute_from_id(institute_id_state) # institute_name –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∑–¥–µ—Å—å
    await callback.message.edit_text(
        f"–§–æ—Ä–º–∞: {education_state.replace('–±–∞–∫–∞–ª–∞–≤—Ä','–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç').replace('–º–∞–≥–∏—Å—Ç—Ä','–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞')}\n"
        f"–ò–Ω—Å—Ç–∏—Ç—É—Ç: {institute_name}\n" # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π institute_name
        f"3. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:",
        reply_markup=kb.get_fuclty_kb(institute_id_state, education_state, 1)
    )
    await callback.answer()


@router.callback_query(Student.group, F.data.startswith("course_"))
async def process_group_course_choice(callback: CallbackQuery, state: FSMContext):
    course = int(callback.data.split("_")[1])
    await state.update_data(course_for_group_selection=course)
    data = await state.get_data()
    faculty_id_state = data.get("fuclty_id")
    education_state = data.get("education")
    institute_id_state = data.get("institute_id")
    if not all([faculty_id_state, education_state, institute_id_state]):
        await state.set_state(Student.education)
        await callback.message.edit_text("–û—à–∏–±–∫–∞: –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.", reply_markup=kb.get_education_kb())
        await callback.answer("–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è", show_alert=True)
        return
    institute_name = bd.get_institute_from_id(institute_id_state)
    faculty_name = bd.get_fuclty_from_id(faculty_id_state)
    await callback.message.edit_text(
        f"–§–æ—Ä–º–∞: {education_state.replace('–±–∞–∫–∞–ª–∞–≤—Ä', '–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç').replace('–º–∞–≥–∏—Å—Ç—Ä', '–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞')}\n"
        f"–ò–Ω—Å—Ç–∏—Ç—É—Ç: {institute_name}\n"
        f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {faculty_name}\n"
        f"4. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É ({course} –∫—É—Ä—Å):",
        reply_markup=kb.get_group_kb(faculty_id_state, course, education_state, 1)
    )
    await callback.answer()


@router.callback_query(Student.group, F.data.startswith("study_group_page_"))
async def paginate_groups(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    page = int(parts[3])
    course = int(parts[4])
    data = await state.get_data()
    faculty_id_state = data.get("fuclty_id")
    education_state = data.get("education")
    institute_id_state = data.get("institute_id")
    if not all([faculty_id_state, education_state, institute_id_state]):
        await state.set_state(Student.education)
        await callback.message.edit_text("–û—à–∏–±–∫–∞: –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.", reply_markup=kb.get_education_kb())
        await callback.answer("–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è", show_alert=True)
        return
    institute_name = bd.get_institute_from_id(institute_id_state)
    faculty_name = bd.get_fuclty_from_id(faculty_id_state)
    await callback.message.edit_text(
        f"–§–æ—Ä–º–∞: {education_state.replace('–±–∞–∫–∞–ª–∞–≤—Ä', '–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç').replace('–º–∞–≥–∏—Å—Ç—Ä', '–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞')}\n"
        f"–ò–Ω—Å—Ç–∏—Ç—É—Ç: {institute_name}\n"
        f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {faculty_name}\n"
        f"4. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É ({course} –∫—É—Ä—Å, —Å—Ç—Ä. {page}):",
        reply_markup=kb.get_group_kb(faculty_id_state, course, education_state, page)
    )
    await callback.answer()


@router.callback_query(Student.group, F.data.startswith("id_study_group_"))
async def process_group_choice(callback: CallbackQuery, state: FSMContext):
    study_group_id = int(callback.data.split("_")[-1])  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –∏–Ω–¥–µ–∫—Å
    await state.update_data(study_group_id=study_group_id)
    data = await state.get_data()
    education_state = data.get("education")
    institute_id_state = data.get("institute_id")
    faculty_id_state = data.get("fuclty_id")
    institute_name = bd.get_institute_from_id(institute_id_state)
    faculty_name = bd.get_fuclty_from_id(faculty_id_state)
    group_name = bd.get_study_group_from_id(study_group_id)
    await state.set_state(Student.name)
    await callback.message.edit_text(
        f"–§–æ—Ä–º–∞: {education_state.replace('–±–∞–∫–∞–ª–∞–≤—Ä', '–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç').replace('–º–∞–≥–∏—Å—Ç—Ä', '–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞')}\n"
        f"–ò–Ω—Å—Ç–∏—Ç—É—Ç: {institute_name}\n"
        f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {faculty_name}\n"
        f"–ì—Ä—É–ø–ø–∞: {group_name}\n"
        f"5. –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–±—è –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=kb.get_student_kb(study_group_id, 1)
    )
    await callback.answer()


@router.callback_query(Student.name, F.data == "back_to_group_selection")
async def back_to_group_from_student(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    faculty_id_state = data.get("fuclty_id")
    education_state = data.get("education")
    institute_id_state = data.get("institute_id")
    course = data.get("course_for_group_selection", 1)
    if not all([faculty_id_state, education_state, institute_id_state]):
        await state.set_state(Student.education)
        await callback.message.edit_text("–û—à–∏–±–∫–∞: –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.", reply_markup=kb.get_education_kb())
        await callback.answer("–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è", show_alert=True)
        return
    await state.set_state(Student.group)
    await state.update_data(student_id=None)
    institute_name = bd.get_institute_from_id(institute_id_state) # institute_name –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∑–¥–µ—Å—å
    faculty_name = bd.get_fuclty_from_id(faculty_id_state)     # faculty_name –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∑–¥–µ—Å—å
    await callback.message.edit_text(
        f"–§–æ—Ä–º–∞: {education_state.replace('–±–∞–∫–∞–ª–∞–≤—Ä','–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç').replace('–º–∞–≥–∏—Å—Ç—Ä','–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞')}\n"
        f"–ò–Ω—Å—Ç–∏—Ç—É—Ç: {institute_name}\n" # –ò—Å–ø–æ–ª—å–∑—É–µ–º
        f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {faculty_name}\n" # –ò—Å–ø–æ–ª—å–∑—É–µ–º
        f"4. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É ({course} –∫—É—Ä—Å):",
        reply_markup=kb.get_group_kb(faculty_id_state, course, education_state, 1)
    )
    await callback.answer()


@router.callback_query(Student.name, F.data.startswith("student_page_"))
async def paginate_students(callback: CallbackQuery, state: FSMContext):
    page = int(callback.data.split("_")[2])
    data = await state.get_data()
    study_group_id_state = data.get("study_group_id")
    if not study_group_id_state:
        await state.set_state(Student.group)
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –Ω–∞—á–∞–ª–æ
        await callback.message.edit_text("–û—à–∏–±–∫–∞: –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É.", reply_markup=None)
        await callback.answer("–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è", show_alert=True)
        return

    education_state = data.get("education")
    institute_id_state = data.get("institute_id")
    faculty_id_state = data.get("fuclty_id")
    institute_name = bd.get_institute_from_id(institute_id_state) if institute_id_state else ""
    faculty_name = bd.get_fuclty_from_id(faculty_id_state) if faculty_id_state else ""
    group_name = bd.get_study_group_from_id(study_group_id_state) if study_group_id_state else ""

    await callback.message.edit_text(
        f"–§–æ—Ä–º–∞: {education_state.replace('–±–∞–∫–∞–ª–∞–≤—Ä', '–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç').replace('–º–∞–≥–∏—Å—Ç—Ä', '–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞') if education_state else ''}\n"
        f"–ò–Ω—Å—Ç–∏—Ç—É—Ç: {institute_name}\n"
        f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {faculty_name}\n"
        f"–ì—Ä—É–ø–ø–∞: {group_name}\n"
        f"5. –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–±—è –∏–∑ —Å–ø–∏—Å–∫–∞ (—Å—Ç—Ä. {page}):",
        reply_markup=kb.get_student_kb(study_group_id_state, page)
    )
    await callback.answer()


@router.callback_query(Student.name, F.data.startswith("id_student_"))
async def process_student_choice(callback: CallbackQuery, state: FSMContext):
    student_id = int(callback.data.split("_")[-1])  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –∏–Ω–¥–µ–∫—Å
    await state.update_data(student_id=student_id)
    await state.set_state(None)  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ FSM –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

    try:
        await callback.message.delete()
    except Exception:
        pass

    data = await state.get_data()
    institute_id = data.get("institute_id")
    fuclty_id = data.get("fuclty_id")
    study_group_id = data.get("study_group_id")
    education_str = data.get("education")

    institute_name = bd.get_institute_from_id(institute_id) if institute_id else "–Ω–µ –≤—ã–±—Ä–∞–Ω"
    fuclty_name_str = bd.get_fuclty_from_id(fuclty_id) if fuclty_id else "–Ω–µ –≤—ã–±—Ä–∞–Ω–æ"
    group_name_str = bd.get_study_group_from_id(study_group_id) if study_group_id else "–Ω–µ –≤—ã–±—Ä–∞–Ω–∞"
    student_name_str = bd.get_student_from_id(student_id) if student_id else "–Ω–µ –≤—ã–±—Ä–∞–Ω(–∞)"
    education_display = education_str.replace('–±–∞–∫–∞–ª–∞–≤—Ä', '–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç').replace('–º–∞–≥–∏—Å—Ç—Ä',
                                                                                 '–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞') if education_str else "–Ω–µ –≤—ã–±—Ä–∞–Ω–∞"

    information = (
        f"üéâ <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b> üéâ\n\n"
        f"<b>–§–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è:</b> {education_display}\n"
        f"<b>–ò–Ω—Å—Ç–∏—Ç—É—Ç:</b> {institute_name}\n"
        f"<b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {fuclty_name_str}\n"
        f"<b>–ì—Ä—É–ø–ø–∞:</b> {group_name_str}\n"
        f"<b>–§–ò–û:</b> {student_name_str}\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞!"
    )
    await callback.message.answer(information, parse_mode="html")
    await callback.message.answer(info_text, reply_markup=kb.first_kb, parse_mode="html")
    await callback.answer("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


# 5. –•–ï–ù–î–õ–ï–†–´ –î–õ–Ø FSM –î–û–ë–ê–í–õ–ï–ù–ò–Ø –î–ê–ù–ù–´–• (AddData)

@router.callback_query(StateFilter(Student.institute), F.data.startswith("request_add_institute_edu_"))
async def request_add_institute_handler(callback: CallbackQuery, state: FSMContext):
    education_for_add = callback.data.split("request_add_institute_edu_")[1]

    student_data_for_context = await state.get_data()
    await state.set_state(AddData.waiting_for_institute_name)
    await state.update_data(
        add_data_target='institute',
        add_data_education=education_for_add,
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ Student FSM
        education=student_data_for_context.get("education"),
    )
    await callback.message.edit_text(
        f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º—ã –æ–±—É—á–µ–Ω–∏—è: <b>{education_for_add.replace('–±–∞–∫–∞–ª–∞–≤—Ä', '–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç').replace('–º–∞–≥–∏—Å—Ç—Ä', '–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞')}</b>.\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úñÔ∏è –û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", callback_data="cancel_add_data_process")]
        ])
    )
    await callback.answer()


@router.message(AddData.waiting_for_institute_name, F.text)
async def process_new_institute_name(message: Message, state: FSMContext, bot: Bot):
    institute_name_input = message.text.strip()
    data = await state.get_data()
    education_for_add = data.get("add_data_education")

    if not institute_name_input or not education_for_add:
        await message.answer("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                             reply_markup=kb.first_kb)
        await state.clear()
        return

    admin_message_text = (
        f"‚ö†Ô∏è <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ò–ù–°–¢–ò–¢–£–¢–ê</b> ‚ö†Ô∏è\n\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {institute_name_input}\n"
        f"<b>–§–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è:</b> {education_for_add.replace('–±–∞–∫–∞–ª–∞–≤—Ä', '–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç').replace('–º–∞–≥–∏—Å—Ç—Ä', '–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞')}\n"
        f"<b>–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> @{message.from_user.username} (ID: {message.from_user.id})"
    )
    try:
        await bot.send_message(ADMIN_USER_ID, admin_message_text, parse_mode="HTML")
        await message.answer(f"–ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞ '{institute_name_input}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                             reply_markup=kb.first_kb)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É (–∏–Ω—Å—Ç–∏—Ç—É—Ç): {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=kb.first_kb)

    original_education = data.get("education")  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º education –∏–∑ Student FSM
    await state.clear()  # –û—á–∏—â–∞–µ–º AddData
    if original_education:  # –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞
        await state.set_state(Student.institute)
        await state.update_data(education=original_education)
        await message.answer(
            f"–§–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è: {original_education.replace('–±–∞–∫–∞–ª–∞–≤—Ä', '–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç').replace('–º–∞–≥–∏—Å—Ç—Ä', '–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞')}\n"
            f"2. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∏–Ω—Å—Ç–∏—Ç—É—Ç (—Å–ø–∏—Å–æ–∫ –º–æ–≥ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è):",
            reply_markup=kb.get_institute_kb(original_education, 1)
        )
    else:  # –ò–Ω–∞—á–µ –≤ –Ω–∞—á–∞–ª–æ
        await state.set_state(Student.education)
        await message.answer("1. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è:", reply_markup=kb.get_education_kb())


@router.callback_query(StateFilter(Student.fuclty), F.data.startswith("request_add_faculty_inst_"))
async def request_add_faculty_handler(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    institute_id_for_add = int(parts[3])
    education_for_add = parts[5]

    student_data_for_context = await state.get_data()
    await state.set_state(AddData.waiting_for_fuclty_name)
    await state.update_data(
        add_data_target='faculty',
        add_data_institute_id=institute_id_for_add,
        add_data_education=education_for_add,
        education=student_data_for_context.get("education"),
        institute_id=student_data_for_context.get("institute_id")
    )
    institute_name = bd.get_institute_from_id(institute_id_for_add)
    await callback.message.edit_text(
        f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è:\n"
        f"<b>–ò–Ω—Å—Ç–∏—Ç—É—Ç:</b> {institute_name}\n"
        f"<b>–§–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è:</b> {education_for_add.replace('–±–∞–∫–∞–ª–∞–≤—Ä', '–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç').replace('–º–∞–≥–∏—Å—Ç—Ä', '–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞')}\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è/—Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úñÔ∏è –û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", callback_data="cancel_add_data_process")]
        ])
    )
    await callback.answer()


@router.message(AddData.waiting_for_fuclty_name, F.text)
async def process_new_faculty_name(message: Message, state: FSMContext, bot: Bot):
    faculty_name_input = message.text.strip()
    data = await state.get_data()
    institute_id_for_add = data.get("add_data_institute_id")
    education_for_add = data.get("add_data_education")

    if not all([faculty_name_input, institute_id_for_add, education_for_add]):
        await message.answer("–û—à–∏–±–∫–∞: –ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞—è–≤–∫–∏ (—Ñ–∞–∫—É–ª—å—Ç–µ—Ç). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                             reply_markup=kb.first_kb)
        await state.clear()
        return

    institute_name = bd.get_institute_from_id(institute_id_for_add)
    admin_message_text = (
        f"‚ö†Ô∏è <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø</b> ‚ö†Ô∏è\n\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {faculty_name_input}\n"
        f"<b>–ò–Ω—Å—Ç–∏—Ç—É—Ç:</b> {institute_name} (ID: {institute_id_for_add})\n"
        f"<b>–§–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è:</b> {education_for_add.replace('–±–∞–∫–∞–ª–∞–≤—Ä', '–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç').replace('–º–∞–≥–∏—Å—Ç—Ä', '–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞')}\n"
        f"<b>–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> @{message.from_user.username} (ID: {message.from_user.id})"
    )
    try:
        await bot.send_message(ADMIN_USER_ID, admin_message_text, parse_mode="HTML")
        await message.answer(f"–ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è '{faculty_name_input}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.",
                             reply_markup=kb.first_kb)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É (—Ñ–∞–∫—É–ª—å—Ç–µ—Ç): {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=kb.first_kb)

    original_education = data.get("education")
    original_institute_id = data.get("institute_id")
    await state.clear()
    if original_education and original_institute_id:
        await state.set_state(Student.fuclty)
        await state.update_data(education=original_education, institute_id=original_institute_id)
        institute_name_restored = bd.get_institute_from_id(original_institute_id)
        await message.answer(
            f"–§–æ—Ä–º–∞: {original_education.replace('–±–∞–∫–∞–ª–∞–≤—Ä', '–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç').replace('–º–∞–≥–∏—Å—Ç—Ä', '–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞')}\n"
            f"–ò–Ω—Å—Ç–∏—Ç—É—Ç: {institute_name_restored}\n"
            f"3. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (—Å–ø–∏—Å–æ–∫ –º–æ–≥ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è):",
            reply_markup=kb.get_fuclty_kb(original_institute_id, original_education, 1)
        )
    else:
        await state.set_state(Student.education)
        await message.answer("1. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è:", reply_markup=kb.get_education_kb())


@router.callback_query(StateFilter(Student.group), F.data.startswith("request_add_group_faculty_"))
async def request_add_group_handler(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    faculty_id_for_add = int(parts[4])
    course_for_add = int(parts[6])
    education_for_add = parts[8]

    student_data_for_context = await state.get_data()
    await state.set_state(AddData.waiting_for_group_name)
    await state.update_data(
        add_data_target='group',
        add_data_faculty_id=faculty_id_for_add,
        add_data_course=course_for_add,
        add_data_education=education_for_add,
        education=student_data_for_context.get("education"),
        institute_id=student_data_for_context.get("institute_id"),
        fuclty_id=student_data_for_context.get("fuclty_id"),
        course_for_group_selection=student_data_for_context.get("course_for_group_selection")
    )
    faculty_name = bd.get_fuclty_from_id(faculty_id_for_add)
    institute_name = bd.get_institute_from_id(student_data_for_context.get("institute_id"))
    await callback.message.edit_text(
        f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã –¥–ª—è:\n"
        f"<b>–ò–Ω—Å—Ç–∏—Ç—É—Ç:</b> {institute_name}\n"
        f"<b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {faculty_name}\n"
        f"<b>–ö—É—Ä—Å:</b> {course_for_add}\n"
        f"<b>–§–æ—Ä–º–∞:</b> {education_for_add.replace('–±–∞–∫–∞–ª–∞–≤—Ä', '–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç').replace('–º–∞–≥–∏—Å—Ç—Ä', '–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞')}\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ë–ò–í–¢23-1):",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úñÔ∏è –û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", callback_data="cancel_add_data_process")]
        ])
    )
    await callback.answer()


@router.message(AddData.waiting_for_group_name, F.text)
async def process_new_group_name(message: Message, state: FSMContext):
    group_name_input = message.text.strip()
    if not group_name_input:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ.")
        return
    await state.update_data(add_data_group_name=group_name_input)
    await state.set_state(AddData.waiting_for_group_url)
    await message.answer(
        f"–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: <b>{group_name_input}</b>.\n"
        f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ URL —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã (–µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ '-' –∏–ª–∏ '–Ω–µ—Ç'):",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úñÔ∏è –û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", callback_data="cancel_add_data_process")]
        ])
    )


@router.message(AddData.waiting_for_group_url, F.text)
async def process_new_group_url(message: Message, state: FSMContext, bot: Bot):
    group_url_input = message.text.strip()
    group_url_to_save = group_url_input if group_url_input.lower() not in ['-', '–Ω–µ—Ç'] else None

    data = await state.get_data()
    group_name = data.get("add_data_group_name")
    faculty_id = data.get("add_data_faculty_id")
    course = data.get("add_data_course")
    education = data.get("add_data_education")
    institute_id = data.get("institute_id")  # –ë–µ—Ä–µ–º –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ Student FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

    if not all([group_name, faculty_id, course, education, institute_id]):
        await message.answer("–û—à–∏–±–∫–∞: –ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞—è–≤–∫–∏ (–≥—Ä—É–ø–ø–∞). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=kb.first_kb)
        await state.clear()
        return

    faculty_name = bd.get_fuclty_from_id(faculty_id)
    institute_name = bd.get_institute_from_id(institute_id)

    admin_message_text = (
        f"‚ö†Ô∏è <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ì–†–£–ü–ü–´</b> ‚ö†Ô∏è\n\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {group_name}\n"
        f"<b>URL:</b> {group_url_to_save if group_url_to_save else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"<b>–ò–Ω—Å—Ç–∏—Ç—É—Ç:</b> {institute_name} (ID: {institute_id})\n"
        f"<b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {faculty_name} (ID: {faculty_id})\n"
        f"<b>–ö—É—Ä—Å:</b> {course}\n"
        f"<b>–§–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è:</b> {education.replace('–±–∞–∫–∞–ª–∞–≤—Ä', '–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç').replace('–º–∞–≥–∏—Å—Ç—Ä', '–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞')}\n"
        f"<b>–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> @{message.from_user.username} (ID: {message.from_user.id})"
    )
    try:
        await bot.send_message(ADMIN_USER_ID, admin_message_text, parse_mode="HTML")
        await message.answer(f"–ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã '{group_name}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.", reply_markup=kb.first_kb)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É (–≥—Ä—É–ø–ø–∞): {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=kb.first_kb)

    original_education = data.get("education")
    original_institute_id = data.get("institute_id")
    original_faculty_id = data.get("fuclty_id")
    original_course = data.get("course_for_group_selection", 1)
    await state.clear()
    if all([original_education, original_institute_id, original_faculty_id]):
        await state.set_state(Student.group)
        await state.update_data(education=original_education, institute_id=original_institute_id,
                                fuclty_id=original_faculty_id, course_for_group_selection=original_course)
        institute_name_restored = bd.get_institute_from_id(original_institute_id)
        faculty_name_restored = bd.get_fuclty_from_id(original_faculty_id)
        await message.answer(
            f"–§–æ—Ä–º–∞: {original_education.replace('–±–∞–∫–∞–ª–∞–≤—Ä', '–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç').replace('–º–∞–≥–∏—Å—Ç—Ä', '–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞')}\n"
            f"–ò–Ω—Å—Ç–∏—Ç—É—Ç: {institute_name_restored}\n"
            f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {faculty_name_restored}\n"
            f"4. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É ({original_course} –∫—É—Ä—Å, —Å–ø–∏—Å–æ–∫ –º–æ–≥ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è):",
            reply_markup=kb.get_group_kb(original_faculty_id, original_course, original_education, 1)
        )
    else:
        await state.set_state(Student.education)
        await message.answer("1. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è:", reply_markup=kb.get_education_kb())


@router.callback_query(StateFilter(Student.name), F.data.startswith("request_add_student_to_group_"))
async def request_add_student_handler(callback: CallbackQuery, state: FSMContext):
    group_id_for_add = int(callback.data.split("_")[-1])
    student_data_for_context = await state.get_data()
    await state.set_state(AddData.waiting_for_student_fio)
    await state.update_data(
        add_data_target='student',
        add_data_group_id=group_id_for_add,
        education=student_data_for_context.get("education"),
        institute_id=student_data_for_context.get("institute_id"),
        fuclty_id=student_data_for_context.get("fuclty_id"),
        study_group_id=student_data_for_context.get("study_group_id"),  # study_group_id —ç—Ç–æ –∏ –µ—Å—Ç—å group_id_for_add
        course_for_group_selection=student_data_for_context.get("course_for_group_selection")
    )
    group_name = bd.get_study_group_from_id(group_id_for_add)
    await callback.message.edit_text(
        f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –≥—Ä—É–ø–ø—É: <b>{group_name}</b>.\n"
        f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úñÔ∏è –û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", callback_data="cancel_add_data_process")]
        ])
    )
    await callback.answer()


@router.message(AddData.waiting_for_student_fio, F.text)
async def process_new_student_fio(message: Message, state: FSMContext,
                                  bot: Bot):  # bot: Bot –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –Ω—É–∂–µ–Ω, –µ—Å–ª–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
    student_fio_input = message.text.strip()
    data = await state.get_data()
    group_id_for_add = data.get("add_data_group_id")

    education_str = data.get("education")  # –ò–∑ Student FSM
    institute_id = data.get("institute_id")  # –ò–∑ Student FSM
    faculty_id = data.get("fuclty_id")  # –ò–∑ Student FSM
    # –ö—É—Ä—Å –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å. –û–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω —Å –≥—Ä—É–ø–ø–æ–π –∏–ª–∏ –≤—ã–±–∏—Ä–∞–ª—Å—è —Ä–∞–Ω–µ–µ.
    # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –∫—É—Ä—Å –≥—Ä—É–ø–ø—ã –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø—ã –∏–ª–∏ –æ–Ω –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ state
    # –∫–∞–∫ course_for_group_selection –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥—Ä—É–ø–ø—ã.
    course_for_db = data.get("course_for_group_selection")  # –≠—Ç–æ –∫—É—Ä—Å, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥—Ä—É–ø–ø—ã

    if not all([student_fio_input, group_id_for_add, education_str, institute_id, faculty_id]):
        await message.answer(
            "–û—à–∏–±–∫–∞: –ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ.",
            reply_markup=kb.first_kb)
        await state.clear()
        return

    if course_for_db is None:  # –ï—Å–ª–∏ –∫—É—Ä—Å –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω, —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞
        logging.warning(
            f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {student_fio_input} –≤ –≥—Ä—É–ø–ø—É {group_id_for_add}")
        # –ú–æ–∂–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –∏–∑ –ë–î –ø–æ –≥—Ä—É–ø–ø–µ, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –µ—Å—Ç—å,
        # –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–æ —ç—Ç–æ —É—Å–ª–æ–∂–Ω–∏—Ç FSM).
        # –ü–æ–∫–∞ —á—Ç–æ –≤—ã–≤–µ–¥–µ–º –æ—à–∏–±–∫—É.
        await message.answer(
            "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫—É—Ä—Å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=kb.first_kb)
        await state.clear()
        return

    education_id = bd.get_education_id_by_name(education_str)
    if education_id is None:
        await message.answer(
            f"–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –¥–ª—è —Ñ–æ—Ä–º—ã –æ–±—É—á–µ–Ω–∏—è '{education_str}'. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=kb.first_kb)
        await state.clear()
        return

    # –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –ë–î
    new_student_id_from_db = bd.add_new_student_to_db(
        student_fio=student_fio_input,
        id_study_group=group_id_for_add,
        id_fuclty=faculty_id,
        id_institute=institute_id,
        id_education=education_id,
        course=int(course_for_db)  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫—É—Ä—Å —ç—Ç–æ —á–∏—Å–ª–æ
    )

    if new_student_id_from_db:
        await message.answer(
            f"–í—ã ('{student_fio_input}') –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è, –≤—ã–±—Ä–∞–≤ —Å–µ–±—è –∏–∑ —Å–ø–∏—Å–∫–∞.",
            reply_markup=kb.first_kb
        )
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –º–æ–∂–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ "–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
        # –æ–±–Ω–æ–≤–∏–≤ Student FSM –∏ –æ—Ç–ø—Ä–∞–≤–∏–≤ –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
        # await state.set_state(None) # –°–±—Ä–∞—Å—ã–≤–∞–µ–º AddData
        # await state.update_data( # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ Student FSM
        #     student_id=new_student_id_from_db,
        #     study_group_id=group_id_for_add,
        #     # education, institute_id, fuclty_id —É–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ state
        # )
        # await process_student_choice_after_add(message, state) # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∞–≤—Ç–æ-–¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        # –ù–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—Ö–µ.
    else:
        await message.answer(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å ('{student_fio_input}') –≤ –±–∞–∑—É. "
            f"–í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫–æ–π —Å—Ç—É–¥–µ–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ, –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. "
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å–µ–±—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=kb.first_kb
        )

    # –ù–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —É—Å–ø–µ—Ö–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ë–î, –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ AddData
    # –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É (–≤—ã–±–æ—Ä—É —Å—Ç—É–¥–µ–Ω—Ç–∞),
    # —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ —É–≤–∏–¥–µ—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ (–µ—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ)
    # –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ / –≤—ã–±—Ä–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ.

    original_education = data.get("education")
    original_institute_id = data.get("institute_id")
    original_faculty_id = data.get("fuclty_id")
    original_study_group_id = data.get("study_group_id")  # –≠—Ç–æ ID –≥—Ä—É–ø–ø—ã, –≤ –∫–æ—Ç–æ—Ä–æ–π –±—ã–ª —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤

    await state.clear()  # –û—á–∏—â–∞–µ–º AddData

    if all([original_education, original_institute_id, original_faculty_id, original_study_group_id]):
        await state.set_state(Student.name)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É —Å—Ç—É–¥–µ–Ω—Ç–∞
        await state.update_data(
            education=original_education,
            institute_id=original_institute_id,
            fuclty_id=original_faculty_id,
            study_group_id=original_study_group_id,
            course_for_group_selection=data.get("course_for_group_selection")  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å
        )
        institute_name_restored = bd.get_institute_from_id(original_institute_id)
        faculty_name_restored = bd.get_fuclty_from_id(original_faculty_id)
        group_name_restored = bd.get_study_group_from_id(original_study_group_id)
        await message.answer(  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç.–∫. –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –±—ã–ª–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            f"–§–æ—Ä–º–∞: {original_education.replace('–±–∞–∫–∞–ª–∞–≤—Ä', '–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç').replace('–º–∞–≥–∏—Å—Ç—Ä', '–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞')}\n"
            f"–ò–Ω—Å—Ç–∏—Ç—É—Ç: {institute_name_restored}\n"
            f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {faculty_name_restored}\n"
            f"–ì—Ä—É–ø–ø–∞: {group_name_restored}\n"
            f"5. –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–±—è –∏–∑ —Å–ø–∏—Å–∫–∞ (—Å–ø–∏—Å–æ–∫ –º–æ–≥ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è):",
            reply_markup=kb.get_student_kb(original_study_group_id, 1)
        )
    else:  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        await state.set_state(Student.education)
        await message.answer("1. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è:", reply_markup=kb.get_education_kb())

@router.callback_query(F.data == "cancel_add_data_process", StateFilter(AddData))
async def cancel_add_data_fsm_handler(callback: CallbackQuery, state: FSMContext):
    data_before_add = await state.get_data()
    await state.clear()

    restored_education = data_before_add.get("education")
    restored_institute_id = data_before_add.get("institute_id")
    restored_fuclty_id = data_before_add.get("fuclty_id")
    restored_study_group_id = data_before_add.get("study_group_id")
    restored_course = data_before_add.get("course_for_group_selection", 1)
    add_data_target = data_before_add.get("add_data_target")

    message_text = "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."
    reply_mk = None
    target_state_student_fsm = None
    current_message_context = ""  # –î–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è

    # –õ–æ–≥–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if add_data_target == 'student' and restored_study_group_id and restored_fuclty_id and restored_institute_id and restored_education:
        target_state_student_fsm = Student.name
        # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        # institute_name = bd.get_institute_from_id(restored_institute_id) # –ù–µ –Ω—É–∂–Ω–æ –≤ —Ç–µ–∫—Å—Ç–µ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        # faculty_name = bd.get_fuclty_from_id(restored_fuclty_id)
        # group_name = bd.get_study_group_from_id(restored_study_group_id)
        # current_message_context = f"–ò–Ω—Å—Ç–∏—Ç—É—Ç: {institute_name}\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {faculty_name}\n–ì—Ä—É–ø–ø–∞: {group_name}\n"
        message_text = f"{message_text} –í–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É —Å—Ç—É–¥–µ–Ω—Ç–∞:"
        reply_mk = kb.get_student_kb(restored_study_group_id, 1)
    elif add_data_target == 'group' and restored_fuclty_id and restored_institute_id and restored_education:
        target_state_student_fsm = Student.group
        institute_name = bd.get_institute_from_id(restored_institute_id)
        faculty_name = bd.get_fuclty_from_id(restored_fuclty_id)
        current_message_context = f"–ò–Ω—Å—Ç–∏—Ç—É—Ç: {institute_name}\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {faculty_name}\n"
        message_text = f"{current_message_context}{message_text} –í–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø—ã ({restored_course} –∫—É—Ä—Å):"
        reply_mk = kb.get_group_kb(restored_fuclty_id, restored_course, restored_education, 1)
    elif add_data_target == 'faculty' and restored_institute_id and restored_education:
        target_state_student_fsm = Student.fuclty
        institute_name = bd.get_institute_from_id(restored_institute_id)
        current_message_context = f"–ò–Ω—Å—Ç–∏—Ç—É—Ç: {institute_name}\n"
        message_text = f"{current_message_context}{message_text} –í–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
        reply_mk = kb.get_fuclty_kb(restored_institute_id, restored_education, 1)
    elif add_data_target == 'institute' and restored_education:
        target_state_student_fsm = Student.institute
        current_message_context = f"–§–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è: {restored_education.replace('–±–∞–∫–∞–ª–∞–≤—Ä', '–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç').replace('–º–∞–≥–∏—Å—Ç—Ä', '–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞')}\n"
        message_text = f"{current_message_context}{message_text} –í–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞:"
        reply_mk = kb.get_institute_kb(restored_education, 1)
    else:
        target_state_student_fsm = Student.education
        message_text = "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ:"
        reply_mk = kb.get_education_kb()

    if target_state_student_fsm:
        await state.set_state(target_state_student_fsm)
        await state.update_data(  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Student FSM
            education=restored_education, institute_id=restored_institute_id,
            fuclty_id=restored_fuclty_id, study_group_id=restored_study_group_id,
            course_for_group_selection=restored_course
        )
    try:
        await callback.message.edit_text(message_text, reply_markup=reply_mk, parse_mode="HTML")
    except Exception:
        await callback.message.answer(message_text, reply_markup=reply_mk, parse_mode="HTML")
    await callback.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")


@router.callback_query(StateFilter(Student.group), F.data.startswith("request_add_group_faculty_"))
async def request_add_group_handler(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    faculty_id_for_add = int(parts[4])
    course_for_add = int(parts[6])
    education_for_add = parts[8]  # education –∑–¥–µ—Å—å —Å—Ç—Ä–æ–∫–∞ —Ç–∏–ø–∞ "–±–∞–∫–∞–ª–∞–≤—Ä"

    student_fsm_data = await state.get_data()
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç Student FSM, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–µ–º—É
    # –∏ –ø–µ—Ä–µ–¥–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ ID –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
    await state.set_state(AddData.waiting_for_group_name)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –≥—Ä—É–ø–ø—ã
    await state.update_data(
        add_data_target='group',
        add_data_faculty_id=faculty_id_for_add,
        add_data_course=course_for_add,
        add_data_education=education_for_add,  # education –∏–∑ callback
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Student FSM –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
        education=student_fsm_data.get("education"),
        institute_id=student_fsm_data.get("institute_id"),
        fuclty_id=student_fsm_data.get("fuclty_id"),  # –≠—Ç–æ ID —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –º—ã –±—ã–ª–∏
        course_for_group_selection=student_fsm_data.get("course_for_group_selection")  # –≠—Ç–æ –∫—É—Ä—Å, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–æ–±—Ä–∞–∂–∞–ª—Å—è
    )

    faculty_name = bd.get_fuclty_from_id(faculty_id_for_add)
    institute_name = bd.get_institute_from_id(student_fsm_data.get("institute_id"))

    await callback.message.edit_text(
        f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã –¥–ª—è:\n"
        f"<b>–ò–Ω—Å—Ç–∏—Ç—É—Ç:</b> {institute_name if institute_name else '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}\n"
        f"<b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {faculty_name if faculty_name else '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'}\n"
        f"<b>–ö—É—Ä—Å:</b> {course_for_add}\n"
        f"<b>–§–æ—Ä–º–∞:</b> {education_for_add.replace('–±–∞–∫–∞–ª–∞–≤—Ä', '–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç').replace('–º–∞–≥–∏—Å—Ç—Ä', '–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞')}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ë–ò–í–¢23-1):",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úñÔ∏è –û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", callback_data="cancel_add_data_process")]
        ])
    )
    await callback.answer()


@router.message(AddData.waiting_for_group_name, F.text)
async def process_new_group_name(message: Message, state: FSMContext):
    group_name_input = message.text.strip()
    if not group_name_input:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ.")
        return

    await state.update_data(add_data_group_name_input=group_name_input)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–µ –∏–º—è, —á—Ç–æ–±—ã –Ω–µ –ø—É—Ç–∞—Ç—å
    await state.set_state(AddData.waiting_for_group_url)
    await message.answer(
        f"–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: <b>{group_name_input}</b>.\n"
        f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ URL —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã (–µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ '-' –∏–ª–∏ '–Ω–µ—Ç'):",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úñÔ∏è –û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", callback_data="cancel_add_data_process")]
        ])
    )


@router.message(AddData.waiting_for_group_url, F.text)
async def process_new_group_url(message: Message, state: FSMContext,
                                bot: Bot):  # bot –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –Ω—É–∂–µ–Ω, –µ—Å–ª–∏ –Ω–µ —à–ª–µ–º –∞–¥–º–∏–Ω—É
    group_url_input = message.text.strip()
    group_url_to_save = group_url_input if group_url_input.lower() not in ['-', '–Ω–µ—Ç'] else None

    data = await state.get_data()
    new_group_name = data.get("add_data_group_name_input")
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ Student FSM
    faculty_id_for_context = data.get("fuclty_id")  # –≠—Ç–æ ID —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –º—ã –±—ã–ª–∏
    course_for_context = data.get("course_for_group_selection")  # –≠—Ç–æ –∫—É—Ä—Å, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–æ–±—Ä–∞–∂–∞–ª—Å—è
    education_for_context = data.get("education")  # –≠—Ç–æ —Ñ–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è –∏–∑ Student FSM
    # institute_id_for_context = data.get("institute_id") # –î–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

    if not new_group_name:  # faculty_id, course, education –¥–ª—è –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã –±–µ—Ä—É—Ç—Å—è –∏–∑ add_data_...
        await message.answer("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=kb.first_kb)
        await state.clear()
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –≤ –ë–î
    new_group_id_from_db = bd.add_new_group_to_db(
        group_name=new_group_name,
        group_url=group_url_to_save
    )

    if new_group_id_from_db:
        await message.answer(
            f"–ì—Ä—É–ø–ø–∞ '{new_group_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞/–Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (ID: {new_group_id_from_db}).\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –µ–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ –Ω–µ–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.",
            reply_markup=kb.first_kb  # –ò–ª–∏ –¥—Ä—É–≥–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        )
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        # admin_message_text = f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –≥—Ä—É–ø–ø–∞: {new_group_name} (URL: {group_url_to_save if group_url_to_save else '–Ω–µ —É–∫–∞–∑–∞–Ω'}) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{message.from_user.username}."
        # try:
        #     await bot.send_message(ADMIN_USER_ID, admin_message_text)
        # except Exception as e:
        #     logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: {e}")
    else:
        await message.answer(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É '{new_group_name}' –≤ –±–∞–∑—É. "
            f"–í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=kb.first_kb
        )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø—ã –Ω–∞ —Ç–æ–º –∂–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–µ/–∫—É—Ä—Å–µ
    await state.clear()  # –û—á–∏—â–∞–µ–º AddData —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if faculty_id_for_context and course_for_context and education_for_context:
        await state.set_state(Student.group)
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ Student FSM
        await state.update_data(
            education=education_for_context,
            institute_id=data.get("institute_id"),  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º institute_id
            fuclty_id=faculty_id_for_context,
            course_for_group_selection=course_for_context
        )

        institute_name_restored = bd.get_institute_from_id(data.get("institute_id"))
        faculty_name_restored = bd.get_fuclty_from_id(faculty_id_for_context)

        await message.answer(  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            f"–§–æ—Ä–º–∞: {education_for_context.replace('–±–∞–∫–∞–ª–∞–≤—Ä', '–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç').replace('–º–∞–≥–∏—Å—Ç—Ä', '–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞')}\n"
            f"–ò–Ω—Å—Ç–∏—Ç—É—Ç: {institute_name_restored if institute_name_restored else '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}\n"
            f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {faculty_name_restored if faculty_name_restored else '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'}\n"
            f"4. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É ({course_for_context} –∫—É—Ä—Å, —Å–ø–∏—Å–æ–∫ –º–æ–≥ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è):",
            reply_markup=kb.get_group_kb(faculty_id_for_context, course_for_context, education_for_context, 1)
        )
    else:  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        await state.set_state(Student.education)
        await message.answer("1. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è:", reply_markup=kb.get_education_kb())


# 6. –û–ë–©–ò–ï –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–´–ï –•–ï–ù–î–õ–ï–†–´ (–û—Ç–º–µ—Ç–∏—Ç—å—Å—è, –°–ø–∏—Å–∫–∏, –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ)
# –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∞—à–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π, —è –æ—Å—Ç–∞–≤–ª—è—é –∑–∞–≥–ª—É—à–∫–∏ –∏–ª–∏ –≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥
# –í–∞–∂–Ω–æ: —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–∏ –ø—Ä–æ–≤–µ—Ä—è—é—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (—Ç.–µ. student_id –∏ group_id –≤ state)
chat_ids = [1871402519]


async def clear_schedule(state: FSMContext):
    print("—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—á–∏—Å—Ç–∏–ª–æ—Å—å")
    await state.update_data(schedule=None)


@router.message(CommandStart())
async def command_start(message: Message, state: FSMContext) -> None:
    """–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ —Å—Ç–∞—Ä—Ç"""
    if message.from_user.id not in chat_ids:
        chat_ids.append(message.from_user.id)
    print(chat_ids)
    scheduler = AsyncIOScheduler()
    scheduler.add_job(
        clear_schedule, "cron", minute=1, hour=0, day_of_week="mon", args=[state]
    )
    scheduler.start()
    await message.delete()
    await message.answer(start_text, reply_markup=kb.first_kb)
    await message.answer(info_text, parse_mode="html")
    #await message.answer_sticker(
        #"CAACAgIAAxkBAAEMARFmLVqDWXJu6zTfHeHGH9Ug8Eqx6wACyUAAAr5sEEgMQFhAO8zizTQE"
    #)


# @router.message(Command('help'))
# async def command_help(message: Message) -> None:
#     await message.answer(help_text, parse_mode='HTML')


@router.message(F.text == "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
async def find_group(message: Message, state: FSMContext) -> None:
    """–•–µ–Ω–¥–ª–µ—Ä –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–ª–æ–≤–æ '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è' –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ–≥–æ"""
    await message.delete()
    sent_message = await message.answer(
        text="–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", reply_markup=ReplyKeyboardRemove()
    )
    await sent_message.delete()
    state_data = await state.get_data()
    schedule = state_data.get("schedule")
    if schedule is not None and not (
        schedule == "–ù–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é –∑–∞–Ω—è—Ç–∏—è –Ω–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã üòò"
    ):
        # await message.answer("")
        print("deleting")
        student_id = state_data.get("student_id")
        group_id = state_data.get("study_group_id")

        for day in schedule:
            times = []
            if not datetime.now().date() == dateparser.parse(day["date"]).date():
                print("–î–∞—Ç—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
            else:
                for lesson in day["lessons"]:
                    start_h = int(lesson["time_start"].split(":")[0])
                    start_m = int(lesson["time_start"].split(":")[1])
                    end_h = int(lesson["time_end"].split(":")[0])
                    end_m = int(lesson["time_end"].split(":")[1])
                    spot_lesson = lesson["spot"]
                    name_lesson = lesson["name_lesson"]
                    times.append(
                        [
                            time(start_h, start_m),
                            time(end_h, end_m),
                            spot_lesson,
                            name_lesson,
                        ]
                    )
                # times.append([time(1, 00), time(3, 40), "–ì–ª–∞–≤–Ω—ã–π —É—á–µ–±–Ω—ã–π –∫–æ—Ä–ø—É—Å", "Home"])
                # times.append([time(14, 00), time(16, 40), "–ì–ª–∞–≤–Ω—ã–π —É—á–µ–±–Ω—ã–π –∫–æ—Ä–ø—É—Å", "Discord"])

                # print(times)
                for start, end, spot, name in times:
                    print(f"{time(start.hour - 1, start.minute + 40)} - {end} - {spot}")
                    start_time = time(start.hour - 1, start.minute + 40)
                    now_time = time(datetime.now().hour, datetime.now().minute)
                    if start_time <= now_time <= end:
                        bd.delete_visiting(
                            lesson=name,
                            group_id=group_id,
                            student_id=student_id,
                            year=datetime.now().year,
                            month=datetime.now().month,
                            day=datetime.now().day,
                        )

    await state.update_data(
        institute_id=None,
        fuclty_id=None,
        study_group_id=None,
        student_id=None,
        education=None,
        schedule=None,
    )
    await message.answer("–í—ã–±–µ—Ä–∏ —Å–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", reply_markup=kb.get_education_kb())
    # await message.delete()


@router.message(F.text == "–û—Ç–º–µ—Ç–∏—Ç—å—Å—è")
async def get_location(message: Message, state: FSMContext):
    state_data = await state.get_data()
    group_id = state_data.get("study_group_id")
    url = bd.get_schedule_url(group_id)
    if group_id is None:
        await message.answer("–¢–∞–∫ —Ç—ã —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Å—è üò°")
        #await message.answer_sticker(
           # "CAACAgQAAxkBAAEMC1dmNK3bWk21XDnN-lEU2XG5EtbuSwACjwcAAvnhgFEO9a_zf5fHtDQE"
        #)
    elif url is None:
        await message.answer("–ù–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é –∑–∞–Ω—è—Ç–∏—è –Ω–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã üòò")
    else:
        sent_message = await message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...")
        schedule_state = state_data.get("schedule")
        if schedule_state is None:
            schedule = purse.get_schedule(url)
            await state.update_data(schedule=schedule)
        state_data = await state.get_data()
        schedule = state_data.get("schedule")
        await sent_message.delete()

        if schedule == "–ù–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é –∑–∞–Ω—è—Ç–∏—è –Ω–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã üòò":
            await message.answer(schedule)
        else:
            flag = True
            for day in schedule:
                times = []
                if not datetime.now().date() == dateparser.parse(day["date"]).date():
                    print("–î–∞—Ç—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
                else:
                    print("–î–∞—Ç—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç")
                    for lesson in day["lessons"]:

                        start_h = int(lesson["time_start"].split(":")[0])
                        start_m = int(lesson["time_start"].split(":")[1])
                        end_h = int(lesson["time_end"].split(":")[0])
                        end_m = int(lesson["time_end"].split(":")[1])
                        spot_lesson = lesson["spot"]
                        name_lesson = lesson["name_lesson"]

                        times.append(
                            [
                                time(start_h, start_m),
                                time(end_h, end_m),
                                spot_lesson,
                                name_lesson,
                            ]
                        )

                    # times.append([time(14, 00), time(16, 40), "–ì–ª–∞–≤–Ω—ã–π —É—á–µ–±–Ω—ã–π –∫–æ—Ä–ø—É—Å", "Discord"])

                    for start, end, spot, name in times:
                        # print(f"{time(start.hour - 1, start.minute + 40)} - {end} - {spot}")
                        start_time = time(start.hour - 1, start.minute + 40)
                        now_time = time(datetime.now().hour, datetime.now().minute)
                        if start_time <= now_time <= end:
                            flag = False
                            # print(f"now: {time(start.hour - 1, start.minute + 40)} - {end} - {spot}")
                            mess_text = (
                                "–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ –ø–∞—Ä–µ \n\n<b>–ü—Ä–µ–¥–º–µ—Ç:</b> "
                                + name
                                + "\n\n<b>–í—Ä–µ–º—è:</b> "
                                + start.strftime("%H:%M")
                                + "-"
                                + end.strftime("%H:%M")
                                + "\n\n<b>–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:</b> "
                                + spot
                            )
                            await message.answer(mess_text, parse_mode="html")
                            await message.answer(
                                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.",
                                reply_markup=kb.geo_kb,
                            )

            if flag:
                await message.answer(
                    "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç—ã –Ω–∏ –Ω–∞ —á—Ç–æ –Ω–µ –º–æ–∂–µ—à—å –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è",
                    reply_markup=kb.cancel_kb,
                )
                #sticker_id = "CAACAgIAAxkBAAEMETpmOojZfGmJtZsVqrGTqV1AB1tangACORYAAjL-yEpvoPRnuqpSqTUE"
                #await message.answer_sticker(sticker_id)


@router.message(F.location)
async def handle_location(message: Message, state: FSMContext):
    latitude = message.location.latitude
    longitude = message.location.longitude
    state_data = await state.get_data()
    schedule = state_data.get("schedule")
    student_id = state_data.get("student_id")
    group_id = state_data.get("study_group_id")
    if not schedule == "–ù–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é –∑–∞–Ω—è—Ç–∏—è –Ω–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã üòò":
        for day in schedule:
            times = []
            if not datetime.now().date() == dateparser.parse(day["date"]).date():
                print("–î–∞—Ç—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
            else:
                for lesson in day["lessons"]:
                    start_h = int(lesson["time_start"].split(":")[0])
                    start_m = int(lesson["time_start"].split(":")[1])
                    end_h = int(lesson["time_end"].split(":")[0])
                    end_m = int(lesson["time_end"].split(":")[1])
                    spot_lesson = lesson["spot"]
                    name_lesson = lesson["name_lesson"]
                    times.append(
                        [
                            time(start_h, start_m),
                            time(end_h, end_m),
                            spot_lesson,
                            name_lesson,
                        ]
                    )
                # times.append([time(1, 00), time(3, 40), "–ì–ª–∞–≤–Ω—ã–π —É—á–µ–±–Ω—ã–π –∫–æ—Ä–ø—É—Å", "Home"])
                # times.append([time(14, 00), time(16, 40), "–ì–ª–∞–≤–Ω—ã–π —É—á–µ–±–Ω—ã–π –∫–æ—Ä–ø—É—Å", "Discord"])

                # print(times)
                for start, end, spot, name in times:
                    print(f"{time(start.hour - 1, start.minute + 40)} - {end} - {spot}")
                    start_time = time(start.hour - 1, start.minute + 40)
                    now_time = time(datetime.now().hour, datetime.now().minute)
                    if start_time <= now_time <= end:
                        geo = bd.get_geo(spot)
                        spot_geo = (float(geo[0]), float(geo[1]))
                        student_geo = (latitude, longitude)
                        distance = haversine(spot_geo, student_geo, unit=Unit.METERS)
                        print(distance)

                        if distance > 350:
                            mess = (
                                "–¢—ã –ù–ï —Å–º–æ–≥ –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ –ø–∞—Ä–µ\n\n"
                                + "–ß—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω—É–∂–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –¥–æ 350 –º–µ—Ç—Ä–æ–≤ –æ—Ç –∫–æ—Ä–ø—É—Å–∞\n\n"
                                + "–¢–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ  —É—á–µ–±–Ω–æ–≥–æ –∫–æ—Ä–ø—É—Å–∞: ~"
                                + str(round(distance))
                                + " –º–µ—Ç—Ä–æ–≤"
                            )
                            await message.answer(mess, reply_markup=kb.geo_kb)
                        else:
                            success = bd.insert_lesson(
                                lesson_name=name,  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å 'lesson' –Ω–∞ 'lesson_name'
                                group_id=group_id,
                                student_id=student_id,
                                year=datetime.now().year,
                                month=datetime.now().month,
                                day=datetime.now().day,
                            )
                            if success:
                                await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω—ã –Ω–∞ –ø–∞—Ä–µ: {name}!", reply_markup=kb.first_kb)
                            else:
                                await message.answer(
                                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ –ø–∞—Ä–µ: {name}. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —É–∂–µ –æ—Ç–º–µ—á–µ–Ω—ã –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.",
                                    reply_markup=kb.first_kb)


@router.message(F.text == "–°–ø–∏—Å–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö")
async def send_file_handler(message: Message, state: FSMContext) -> None:
    state_data = await state.get_data()
    group_id = state_data.get("study_group_id")

    if group_id is None:
        await message.answer("–¢–∞–∫ —Ç—ã —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Å—è üò° (–Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –§–ò–û)", reply_markup=kb.first_kb)
        return

    sent_progress_message = None
    try:
        sent_progress_message = await message.answer(
            "–§–æ—Ä–º–∏—Ä—É—é —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–∞–º–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
        )
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ: {e}")

    book = openpyxl.Workbook()
    if "Sheet" in book.sheetnames:
        try:
            book.remove(book["Sheet"])
        except Exception as e_remove_sheet:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–∏—Å—Ç 'Sheet': {e_remove_sheet}")
            # –ï—Å–ª–∏ —É–¥–∞–ª–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º, –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω –∏–ª–∏ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ø—É—Å—Ç—ã–º

    lessons = bd.get_lessons(group_id)
    print(f"[send_file_handler] –î–ª—è –≥—Ä—É–ø–ø—ã ID {group_id} –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–µ–¥–º–µ—Ç—ã: {lessons}")

    data_found_for_any_sheet = False

    if lessons:
        for lesson_name_str in lessons:
            safe_sheet_name = "".join(c if c.isalnum() or c in [' ', '-'] else '_' for c in lesson_name_str)
            safe_sheet_name = safe_sheet_name[:30]
            if not safe_sheet_name:
                safe_sheet_name = f"–ü—Ä–µ–¥–º–µ—Ç_{lessons.index(lesson_name_str) + 1}"

            sheet_title_candidate = safe_sheet_name
            counter = 1
            while sheet_title_candidate in book.sheetnames:
                sheet_title_candidate = f"{safe_sheet_name[:28]}_{counter}"
                counter += 1
            sheet = book.create_sheet(sheet_title_candidate)
            print(f"[send_file_handler] –°–æ–∑–¥–∞–Ω –ª–∏—Å—Ç: {sheet_title_candidate} –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ '{lesson_name_str}'")

            current_date_obj = datetime.now().date()
            year_for_filter = current_date_obj.year if current_date_obj.month >= 9 else current_date_obj.year - 1
            date_start_filter = f"{year_for_filter}-09-01"

            print(
                f"  –í—ã–∑–æ–≤ get_lesson_dates —Å: lesson_name='{lesson_name_str}', group_id={group_id}, date_start_str='{date_start_filter}'")
            lesson_dates_as_header = bd.get_lesson_dates(
                lesson_name=lesson_name_str,
                group_id=group_id,
                date_start_str=date_start_filter
            )
            print(f"  –ü–æ–ª—É—á–µ–Ω—ã –¥–∞—Ç—ã (—Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º '–°—Ç—É–¥–µ–Ω—Ç') –¥–ª—è '{lesson_name_str}': {lesson_dates_as_header}")

            actual_dates_to_query = lesson_dates_as_header[1:] if len(lesson_dates_as_header) > 1 else []

            student_attendance_rows = []
            if actual_dates_to_query:
                print(
                    f"  –í—ã–∑–æ–≤ get_student_list —Å: dates_dd_mm_yyyy={actual_dates_to_query}, group_id={group_id}, lesson_name='{lesson_name_str}'")
                student_attendance_rows = bd.get_student_list(
                    dates_dd_mm_yyyy=actual_dates_to_query,
                    group_id=group_id,
                    lesson_name=lesson_name_str
                )
                if student_attendance_rows:
                    data_found_for_any_sheet = True
            print(f"  –î–∞–Ω–Ω—ã–µ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –¥–ª—è '{lesson_name_str}': {student_attendance_rows}")

            excel_rows_to_write = [lesson_dates_as_header]
            if student_attendance_rows:
                excel_rows_to_write.extend(student_attendance_rows)

            if len(excel_rows_to_write) == 1 and not actual_dates_to_query:
                sheet.append(["–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞."])
            else:
                for row_content in excel_rows_to_write:
                    sheet.append(row_content)

                for col_idx, column_cells in enumerate(sheet.columns):
                    max_cell_length = 0
                    column_letter = openpyxl.utils.get_column_letter(col_idx + 1)
                    for cell in column_cells:
                        try:
                            if cell.value is not None:
                                cell_value_as_str = str(cell.value)
                                if len(cell_value_as_str) > max_cell_length:
                                    max_cell_length = len(cell_value_as_str)
                        except Exception as e_cell_format:
                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —è—á–µ–π–∫–∏ {cell.coordinate}: {e_cell_format}")
                    adjusted_column_width = (max_cell_length + 2) * 1.2 if max_cell_length > 0 else 10
                    sheet.column_dimensions[column_letter].width = adjusted_column_width

                for row_object in sheet.iter_rows(min_row=1, max_row=sheet.max_row):
                    for cell in row_object:
                        cell.alignment = openpyxl.styles.Alignment(horizontal="center", vertical="center")

                if sheet.max_row >= 1:
                    for cell in sheet[1]:
                        cell.font = openpyxl.styles.Font(bold=True)

    if not data_found_for_any_sheet:
        if not lessons:
            summary_sheet = book.create_sheet("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö") if "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö" not in book.sheetnames else book[
                "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"]
            summary_sheet.append(["–î–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."])
        else:
            summary_sheet = book.create_sheet(
                "–°–≤–æ–¥–∫–∞_–Ω–µ—Ç_–ø–æ—Å–µ—â–µ–Ω–∏–π") if "–°–≤–æ–¥–∫–∞_–Ω–µ—Ç_–ø–æ—Å–µ—â–µ–Ω–∏–π" not in book.sheetnames else book[
                "–°–≤–æ–¥–∫–∞_–Ω–µ—Ç_–ø–æ—Å–µ—â–µ–Ω–∏–π"]
            summary_sheet.append(["–ü–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."])
        print("[send_file_handler] –î–∞–Ω–Ω—ã—Ö –¥–ª—è Excel –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ –±—ã–ª–æ —É—Ä–æ–∫–æ–≤ —Å –ø–æ—Å–µ—â–µ–Ω–∏—è–º–∏.")

    excel_buffer = io.BytesIO()
    try:
        book.save(excel_buffer)
        excel_buffer.seek(0)  # –í–∞–∂–Ω–æ! –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ –±—É—Ñ–µ—Ä–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è
        print(f"[send_file_handler] Excel –∫–Ω–∏–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±—É—Ñ–µ—Ä. –†–∞–∑–º–µ—Ä: {excel_buffer.getbuffer().nbytes} –±–∞–π—Ç.")
    except Exception as e_save:
        print(f"[send_file_handler] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ Excel –≤ –±—É—Ñ–µ—Ä: {e_save}")
        if sent_progress_message:
            try:
                await sent_progress_message.delete()
            except:
                pass
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                             reply_markup=kb.first_kb)
        return

    if sent_progress_message:
        try:
            await sent_progress_message.delete()
        except:
            pass

    group_name_from_db = bd.get_study_group_from_id(group_id) or "UnknownGroup"
    safe_group_name_for_file = "".join(c if c.isalnum() else "_" for c in group_name_from_db)
    final_file_name = f"–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å_{safe_group_name_for_file}_{datetime.now().strftime('%Y-%m-%d')}.xlsx"

    # –ü–æ—Ä–æ–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω–µ –ø—É—Å—Ç–æ–π –ª–∏ —Ñ–∞–π–ª. 22 –±–∞–π—Ç–∞ - —ç—Ç–æ –ø—É—Å—Ç–æ–π zip. –†–µ–∞–ª—å–Ω—ã–π xlsx –±—É–¥–µ—Ç –±–æ–ª—å—à–µ.
    # –§–∞–π–ª —Å –æ–¥–Ω–∏–º –ª–∏—Å—Ç–æ–º –∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö" –≤–µ—Å–∏—Ç –æ–∫–æ–ª–æ 5-7 –ö–±–∞–π—Ç.
    if excel_buffer.getbuffer().nbytes > 500:  # –£–≤–µ–ª–∏—á–∏–ª –ø–æ—Ä–æ–≥ –¥–ª—è –±–æ–ª—å—à–µ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º BufferedInputFile –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑ io.BytesIO
            document_to_send = BufferedInputFile(excel_buffer.read(), filename=final_file_name)
            await message.answer_document(
                document=document_to_send,
                caption="–§–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–∞–º–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞ —Ç–µ–∫—É—â–∏–π —É—á–µ–±–Ω—ã–π –≥–æ–¥.",
                reply_markup=kb.first_kb
            )
            print(f"[send_file_handler] –§–∞–π–ª '{final_file_name}' —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–∑ –±—É—Ñ–µ—Ä–∞.")
        except Exception as e_send:
            print(f"[send_file_handler] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e_send}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –æ—Ç—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                                 reply_markup=kb.first_kb)
    else:
        print(
            f"[send_file_handler] –ë—É—Ñ–µ—Ä Excel –ø—É—Å—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö ({excel_buffer.getbuffer().nbytes} –±–∞–π—Ç). –§–∞–π–ª –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞.",
            reply_markup=kb.first_kb)

    excel_buffer.close()


@router.message(F.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def print_info(message: Message, state: FSMContext) -> None:
    # await message.delete()
    state_data = await state.get_data()

    institute = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    institute_id = state_data.get("institute_id")
    if institute_id is not None:
        institute = bd.get_institute_from_id(institute_id)

    fuclty = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    fuclty_id = state_data.get("fuclty_id")
    if fuclty_id is not None:
        fuclty = bd.get_fuclty_from_id(fuclty_id)

    group = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    study_group_id = state_data.get("study_group_id")
    if study_group_id is not None:
        group = bd.get_study_group_from_id(study_group_id)

    student = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    student_id = state_data.get("student_id")
    if student_id is not None:
        student = bd.get_student_from_id(student_id)

    education = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    education_from_state = state_data.get("education")
    if education_from_state is not None:
        education = education_from_state

    print(f"institute: {institute_id}")
    print(f"fuclty: {fuclty_id}")
    print(f"group: {study_group_id}")
    print(f"student: {student_id}")
    information = (
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ —Ç–µ–±—è:\n\n<b>–ò–Ω—Å—Ç–∏—Ç—É—Ç:</b>\n"""
        + institute
        + "\n\n<b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>\n"
        + fuclty
        + "\n\n<b>–ì—Ä—É–ø–ø–∞:</b>\n"
        + group
        + "\n\n<b>–£—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:</b>\n"
        + education
        + "\n\n–§–ò–û:\n"
        + student
    )
    await message.answer(information, parse_mode="html")
    # await message.delete()


@router.message(F.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def show_schedule(message: Message, state: FSMContext):
    state_data = await state.get_data()
    group_id = state_data.get("study_group_id")
    url = bd.get_schedule_url(group_id)
    print(url)
    if group_id is None:
        await message.answer("–¢–∞–∫ —Ç—ã —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Å—è üò°")
        #await message.answer_sticker(
            #"CAACAgQAAxkBAAEMC1dmNK3bWk21XDnN-lEU2XG5EtbuSwACjwcAAvnhgFEO9a_zf5fHtDQE"
        #)
    elif url is None:
        await message.answer("–ù–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é –∑–∞–Ω—è—Ç–∏—è –Ω–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã üòò")
    else:
        sent_message = await message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...")
        schedule_state = state_data.get("schedule")
        if schedule_state is None:
            schedule = purse.get_schedule(url)
            await state.update_data(schedule=schedule)
        state_data = await state.get_data()
        schedule = state_data.get("schedule")
        if schedule == "–ù–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é –∑–∞–Ω—è—Ç–∏—è –Ω–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã üòò":
            await message.answer(schedule)
        else:
            texts = []
            for day in schedule:
                text = "<b>" + day["date"] + "</b>\n\n\t"
                for lesson in day["lessons"]:
                    text += lesson["time_start"] + "-" + lesson["time_end"] + "\n\t"
                    text += lesson["name_lesson"] + "\n\t"
                    text += lesson["lesson_type"] + "\n\t"
                    if not lesson["teacher"] == "":
                        text += lesson["teacher"] + "\n\t"
                    text += lesson["spot"] + ", –∞—É–¥. " + lesson["auditory"] + "\n\n"
                texts.append(text)
            await sent_message.delete()
            for elem in texts:
                await message.answer(elem, parse_mode="html")


# ... (–í–∞—à –∫–æ–¥ –¥–ª—è –û—Ç–º–µ—Ç–∏—Ç—å—Å—è, –°–ø–∏—Å–∫–∏, –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ) ...
# –ü—Ä–∏–º–µ—Ä –¥–ª—è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏

# 7. –û–ë–©–ò–ô –•–ï–ù–î–õ–ï–† –î–õ–Ø –ö–ù–û–ü–ö–ò "‚úñÔ∏è–û—Ç–º–µ–Ω–∞" (ReplyKeyboard)
@router.message(F.text == "‚úñÔ∏è–û—Ç–º–µ–Ω–∞")
async def handle_reply_cancel_button(message: Message, state: FSMContext):
    current_fsm_state = await state.get_state()
    action_cancelled_message = "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."

    if current_fsm_state:
        if current_fsm_state.startswith("Student:"):
            action_cancelled_message = "–ü—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–µ—Ä–≤–∞–Ω –∏ —Å–±—Ä–æ—à–µ–Ω."
        elif current_fsm_state.startswith("AddData:"):
            action_cancelled_message = "–ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ—Ä–≤–∞–Ω."
        await state.clear()
        await message.answer(action_cancelled_message, reply_markup=kb.first_kb)
    else:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã. –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=kb.first_kb)
    try:
        await message.delete()
    except Exception:
        pass
    # await message.answer(info_text, reply_markup=kb.first_kb, parse_mode="html") # info_text –º–æ–∂–Ω–æ –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å


# 8. –û–ë–©–ò–ô –•–ï–ù–î–õ–ï–† –î–õ–Ø –ù–ï–ò–ó–í–ï–°–¢–ù–´–• –ö–û–õ–ë–≠–ö–û–í
@router.callback_query()
async def handle_unknown_callback(callback: CallbackQuery, state: FSMContext):
    current_fsm_state = await state.get_state()
    logging.warning(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π callback: {callback.data}, —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_fsm_state}")
    await callback.answer("–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å–µ–π—á–∞—Å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞.", show_alert=True)
    if not current_fsm_state:
        try:
            await callback.message.edit_reply_markup(reply_markup=None)
        except:
            pass
        await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=kb.first_kb)


# 9. –û–ë–©–ò–ô –•–ï–ù–î–õ–ï–† –î–õ–Ø –ù–ï–ò–ó–í–ï–°–¢–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô (echo)
@router.message()
async def echo_message_handler(message: Message, state: FSMContext) -> None:
    current_fsm_state = await state.get_state()
    if current_fsm_state:
        state_name_readable = current_fsm_state.split(':')[-1]
        await message.answer(
            f"–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ ({state_name_readable}).\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚úñÔ∏è–û—Ç–º–µ–Ω–∞'."
        )
    else:
        await message.answer(text="–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")

